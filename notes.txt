Magesh Kuppan

Schedule:
    Commence    : 9:00 AM
    Tea Break   : 10:30 AM (20 mins)
    Lunch Break : 12:30 PM (1 hour)
    Tea Break   : 3:00 PM (20 mins)
    Wind up     : 5:00 PM

Methodology:
    - No powerpoints
    - 100% hands on driven
    - At least 50% of the participants are expected to have completed the assignment

Software Requirements
    - Go tools (https://go.dev/dl)
    - Visual Studio Code (https://code.visualstudio.com/download)
    - Go extensions for VS Code (https://marketplace.visualstudio.com/items?itemName=golang.Go)
    - Git Client

GitHub Repo
    https://github.com/tkmagesh/cisco-go-dec-2022

Agenda
    Day:01
        Intro, Data Types, Constructs, functions, error handling, deferred functions
    Day:02
        Collections, structs, methods, interfaces, type assertion, modules & packages
    Day:03
        Concurrency, HTTP Services (Overview)

Why Go?
    1. Simplicity
        Only 25 Keywords
        - No access modifiers
        - No classes (only structs)
        - No reference types (everything is a value)
        - No inheritence (only composition)
        - No exceptions (only errors)
        - No "try catch finally" construct
        - No pointer arithmetic
        - No implicity type conversion

    2. Performance
        - Equivalent to C++
        - Close to hardware (No VM)
        - Cross compilation Support
        - Light weight concurrency model

    3. Support for concurrency
        - Concurrency features are built in the language
            ex: go keyword, channel data type, range keyword, select case construct
        - Standard Library
            sync package
            sync/atomic package


    To run a go program
        go run <file_name.go>

    To create a build
        go build <file_name.go>

    To create a build in a different name
        go build -o <binary_name> <file_name.go>

    To analyse heap escape
        go run -gcflags="-m" <program.go>
        go build -gcflags="-m" <program.go>

    To get the list of environment variables
        go env
        go env <variable_1> <variable_2>
            ex: go env GOOS GOARCH
    
    To change the environment variables
        go env -w <variable_1>=<value_1> <variable_2>=<value_2>
        ex:
            go env -w GOOS=windows GOARCH=386

    To get the list of supported platforms for cross compilation
        go tool dist list

    To cross compile
        GOOS=<target_os> GOARCH=<target_arch> go build <file_name.go>
        ex:
            GOOS=windows GOARCH=386 go build program.go

Data Types
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real[float32] + imaginary[float32])
    complex128 (read[float64] + imaginary[float64])

    byte (alias for uint8)
    rune (alias for int32) (unicode code point)

variables
    Function scope
        := is supported
        CANNOT have unused variables

    Package scope
        := is NOT supported
        CAN have unused variables

Constants
    Unused constants (package/function scope) is allowed

Programming constructs
    if else
    switch case
    for

functions
    Functions with more than one return reuslt
        Named return results
    Anonymous functions
    Higher Order functions (Functions as first class citizens)
        - Functions can be assigned as values to variables
        - Functions can be passed as arguments to other functions
        - Functions can be returned as return results

Error
    What?
        Any object that implements the "error" interface
        
    Creation
        errors.New()
        fmt.Errorf()

Panic & Recovery
    panic()
    recover()

Collections
    Array
        fixed size collection of data of the same type

    Slice
        varying size collection of data of the same type

    Map
        key/value collection 

Modularity
    Modules & Packages
    Module
        Any code that need to versioned / deployed together
    Package
        Internal organization of a module

    Before Go.1.13 (No modules)
        GOPATH
            /bin
                binary tools created in golang (yours / 3rd party)
            /pkg
                source code of the 3rd party packages
            /src
                /github.com
                    /tkmagesh
                        /myapp
                            - app.go
                            - *.go
                                import "github.com/tkmagesh/myapp/pkg-1"
                            /pkg-1
                                a.go

                        /pkg-2
                            b.go
                        
    In Go 1.13 modules were introduced
        go.mod
            module name
                (advisable : module name to mimic the complete repo path)
            go min version
            3rd party dependencies reference

        To create a module
            go mod init <module_name>

        To run a module
            go run .

        To build a module
            go build .
        
        To use a 3rd party package
            go get <package_name>
            go get github.com/fatih/color
            go get github.com/fatih/color@latest

        to update the go.mod file
            go mod tidy

        to download the 3rd package source code in to module cache (GOPATH/pkg)
            go mod download

        to localize the dependencies
            go mod vendor

        To refere to the module cache
            go run -mod=mod .
            go build -mod=mod .

        Other useful commands
            go mod graph
            go mod why github.com/mattn/go-isatty
            go mod veriy
    Reference :
        https://go.dev/ref/mod
        

Concurrency
    Ability to have more than one execution path
    
    To detect data race
        go run --race <program.go>
        go build --race <program.go>

        NOTE: 
            Do not create a production build with the rece detector

    Channel
        Data type designed to enable communication between goroutines

        Declaration
            var ch chan int

        Instantiation
            ch = make(chan int)
            OR
            ch := make(chan int)

        Operations (<- operator)
            Send Operation
                ch <- data
            Receive Operation
                data = <- ch

        Behavior
            A RECEIVE operation is ALWAYS a blocking operation

            A SEND operation is blocked until a RECEIVE operation is initiated (conditions apply)